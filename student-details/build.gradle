apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

repositories {
    jcenter()
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "android.arch.lifecycle:viewmodel:1.1.1"
    implementation project(path: ':commons')
    implementation project(path: ':assets')
    implementation project(path: ':collect_app')
    implementation project(path: ':grove')
    testImplementation 'junit:junit:4.13'
    compileOnly 'org.jetbrains:annotations:13.0'
    testCompileOnly 'org.jetbrains:annotations:13.0'
    implementation 'javax.annotation:jsr250-api:1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'devs.mulham.horizontalcalendar:horizontalcalendar:1.3.4'
    implementation("com.apollographql.apollo:apollo-runtime:2.2.0")
    // optional: if you want to use the normalized cache
    implementation("com.apollographql.apollo:apollo-normalized-cache-sqlite:2.2.0")
    // optional: for coroutines support
    implementation("com.apollographql.apollo:apollo-coroutines-support:2.2.0")
    // optional: for RxJava3 support
    implementation 'com.google.android.material:material:1.2.0'
    implementation("com.apollographql.apollo:apollo-rx3-support:2.2.0")
    // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime
    // and use apollo-api instead
    implementation("com.apollographql.apollo:apollo-api:2.2.0")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    kaptAndroidTest "androidx.databinding:databinding-compiler:4.0.1"
    kapt 'com.android.databinding:compiler:3.1.4'
    implementation "androidx.preference:preference:1.1.0"
 }