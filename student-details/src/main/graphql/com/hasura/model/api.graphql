mutation addNewStudents($query_param: [student_insert_input!]!) {
  insert_student(objects: $query_param) {
    affected_rows
     returning {
          srn
          name
        }
  }
}

mutation sendAttendance($query_param: [attendance_insert_input!]!) {
  insert_attendance(objects: $query_param) {
    affected_rows
  }
}

mutation sendTeacherAttendance($query_param: [teacher_attendance_insert_input!]!) {
    insert_teacher_attendance(objects: $query_param) {
        affected_rows
    }
}
mutation sendTeacherAttendanceNewFormat($query_param: [teacher_attendance_updated_insert_input!]!) {
    insert_teacher_attendance_updated(objects: $query_param) {
        affected_rows
    }
}

query getStudentsForSchool($school_code: String) {
    student(where: {school_code: {_eq: $school_code}, isActive: {_eq: true}}) {
        fatherContactNumber
        grade
        fatherName
        motherName
        name
        school_code
        srn
        section
        stream
    }
}



mutation updateStudentSection($srn: String, $changedSection: String) {  update_student(
    where: {srn: {_eq: $srn}},
    _set: {
      section: $changedSection
    }
  ) {
    affected_rows
    returning {
      id
      srn
      section
      name
    }
  }
}




query FetchAttendanceByGradeSection($date: date, $grade: Int, $section: String, $school_code:String) {
    attendance_aggregate(where: {date: {_eq: $date}, studentByStudent: {grade: {_eq: $grade}, section: {_eq: $section}, school_code:{_eq:$school_code}}}) {
        aggregate {
            count
        }
        nodes {
            studentByStudent {
                name
                srn
                grade
                section
            }
            isPresent
            temperature
        }

    }
}


query FetchAttendanceByGradeSectionStream($date: date, $grade: Int, $section: String,  $stream: String, $school_code:String) {
    attendance_aggregate(where: {date: {_eq: $date}, studentByStudent: {grade: {_eq: $grade}, section: {_eq: $section}, stream: {_eq: $stream}, school_code: {_eq: $school_code}}}) {
        nodes {
            studentByStudent {
                name
                srn
                grade
                section
            }
            isPresent
        }

    }
}

query FetchTeacherAttendance($school_code:String, $date:date) {
    teacher_attendance_updated_aggregate(where: {school_code: {_eq: $school_code}, date_of_attendance : {_eq : $date}}) {
        nodes {
            employee_id
            isPresentInSchool
            employee_name
            employee_designation
            attendance_status
            other_reason
        }
    }
}

mutation sendUsageInfo($query_param: [trackInstall_insert_input!]!) {
    insert_trackInstall(objects: $query_param) {
        affected_rows
    }
}
