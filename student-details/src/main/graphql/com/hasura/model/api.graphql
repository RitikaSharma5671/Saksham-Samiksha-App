mutation addNewStudents($query_param: [student_insert_input!]!) {
  insert_student(objects: $query_param) {
    affected_rows
     returning {
          srn
          name
        }
  }
}

mutation sendAttendance($query_param: [attendance_insert_input!]!) {
  insert_attendance(objects: $query_param) {
    affected_rows
  }
}

mutation sendTeacherAttendance($query_param: [teacher_attendance_insert_input!]!) {
    insert_teacher_attendance(objects: $query_param) {
        affected_rows
    }
}

query getStudentsForSchool($query_param : String) {
  student(where: {school_code: {_eq: $query_param}}) {
    fatherContactNumber
    grade
    fatherName
    motherName
    name
    school_code
    srn
    section
    stream
  }
}


mutation updateStudentSection($srn: String, $changedSection: String) {  update_student(
    where: {srn: {_eq: $srn}},
    _set: {
      section: $changedSection
    }
  ) {
    affected_rows
    returning {
      id
      srn
      section
      name
    }
  }
}




query FetchAttendanceByGradeSection($date: date, $taken_by: String, $grade: Int, $section: String) {
    attendance_aggregate(where: {date: {_eq: $date}, taken_by: {_eq: $taken_by}, studentByStudent: {grade: {_eq: $grade}, section: {_eq: $section}}}) {
        nodes {
            studentByStudent {
                name
                srn
                grade
                section
            }
            isPresent
        }

    }
}

query FetchAttendanceByGradeSectionStream($date: date, $taken_by: String, $grade: Int, $section: String,  $stream: String) {
    attendance_aggregate(where: {date: {_eq: $date}, taken_by: {_eq: $taken_by}, studentByStudent: {grade: {_eq: $grade}, section: {_eq: $section}, stream: {_eq: $stream}}}) {
        nodes {
            studentByStudent {
                name
                srn
                grade
                section
            }
            isPresent
        }

    }
}